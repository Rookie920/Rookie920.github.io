I"{'<h4 id="后台保活的几个方向">后台保活的几个方向</h4>

<p>1.<strong>短时间保活</strong></p>
<blockquote>
  <p><code class="highlighter-rouge">beginBackgroundTaskWithName</code>和<code class="highlighter-rouge">endBackgroundTask</code>  <br />
测试机型【iPhone6-12.4.7】后台运行时间约3分钟(176秒)左右;<br />
测试机型【iPhone6s-13.5.1】后台运行时间34秒左右;</p>
</blockquote>

<p>2.<strong>后台持续定位</strong></p>
<blockquote>
  <p>这个适用于地图类app,我们是直播音视频,不适用,暂且不讨论</p>
</blockquote>

<p>3.<strong>后台下载资源</strong></p>
<blockquote>
  <p>这个适用于下载比较大的文件【如:离线地图】,也不适用,暂且不讨论</p>
</blockquote>

<p>4.<strong>播放无声音乐</strong></p>
<blockquote>
  <p>类比前几个方案,这个是最适合我们的;</p>
</blockquote>

<p><strong>上代码</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RKKeepAlive.h
#import &lt;Foundation/Foundation.h&gt;

#import &lt;AVFoundation/AVFoundation.h&gt;

static NSString *const kBgTaskName = @"com.rk.root777.KeepAlive";

@interface RKKeepAlive : NSObject

@property(nonatomic,assign)BOOL needKeepAliveInBackground;
@property(nonatomic,strong)AVAudioPlayer *player;

+(instancetype)sharedKeepInstance;

-(void)startAppLifeCycleMonitor;
@end
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RKKeepAlive.m
#import "RKKeepAlive.h"
#import "AppDelegate.h"

static RKKeepAlive *_keepInstance = nil;

@interface RKKeepAlive(){
    int vvvv;
    NSTimer *_timer;
}
@property (nonatomic, assign) UIBackgroundTaskIdentifier backgroundTaskIdentifier;
@end
@implementation RKKeepAlive

+(instancetype)sharedKeepInstance{
    static dispatch_once_t onceToken;
    dispatch_once(&amp;onceToken, ^{
        _keepInstance = [[super allocWithZone:NULL]init];
    });
    return _keepInstance;
}
+ (instancetype)allocWithZone:(struct _NSZone *)zone{
    return [self sharedKeepInstance];
}

- (void)initPlayer {
    [self.player prepareToPlay];
}
- (AVAudioPlayer *)player {
    if (!_player) {
        NSError *error = nil;
        NSURL *fileURL = [[NSBundle mainBundle] URLForResource:@"mute-mp3" withExtension:@"mp3"];
        AVAudioPlayer *audioPlayer = [[AVAudioPlayer alloc] initWithContentsOfURL:fileURL error:&amp;error];
        audioPlayer.numberOfLoops = NSUIntegerMax;
        _player = audioPlayer;
        NSLog(@"%s 初始化报错了==:%@",__FUNCTION__,error);
    }
    return _player;
}

-(void)startAppLifeCycleMonitor{
    self.needKeepAliveInBackground = YES;
    YBWeakSelf;
    AppDelegate *appDelegate =  (AppDelegate *)[UIApplication sharedApplication].delegate;
    appDelegate.lifeCycleEvent = ^(YBAppLifeCycle lifeCycleType) {
        [weakSelf appDelegateBlockEvent:lifeCycleType];
    };
}
-(void)appDelegateBlockEvent:(YBAppLifeCycle)lifeCycleType {
    switch (lifeCycleType) {
        case APPLifeCycle_EnterForeground:{
            //[self appActive];
            //前台
            NSLog(@"%s：应用将进入前台WillEnterForeground", __FUNCTION__);
            if (self.needKeepAliveInBackground) {
                [self.player pause];
            }
            [[UIApplication sharedApplication] endBackgroundTask:self.backgroundTaskIdentifier];
        }break;
        case APPLifeCycle_EnterBackground:{
            //[self backGround];
            //后台
            self.backgroundTaskIdentifier = [[UIApplication sharedApplication] beginBackgroundTaskWithName:kBgTaskName expirationHandler:^{
                if (self.needKeepAliveInBackground) {
                    [self.player play];
                }
                if (self.backgroundTaskIdentifier != UIBackgroundTaskInvalid) {
                    [[UIApplication sharedApplication] endBackgroundTask:self.backgroundTaskIdentifier];
                    self.backgroundTaskIdentifier = UIBackgroundTaskInvalid;
                }
            }];
            NSLog(@"%s：应用进入后台DidEnterBackground", __FUNCTION__);
        }break;
        case APPLifeCycle_WillTerminate:{
            //杀进程
            NSLog(@"%s：应用终止：WillTerminate", __FUNCTION__);
        }break;
            
        default:
            break;
    }
}
#pragma mark - 保活测试
-(void)backGround {
    [self setupTimer];
}
-(void)appActive {
    if (_timer) {
        [_timer invalidate];
        _timer = nil;
        vvvv = 0;
    }
}

#pragma mark - 定时器
- (void)setupTimer {
    vvvv = 1;
    
    _timer = [NSTimer timerWithTimeInterval:1.0 target:self selector:@selector(timerEvent:) userInfo:nil repeats:YES];
    [[NSRunLoop currentRunLoop] addTimer:_timer forMode:NSRunLoopCommonModes];
    [_timer fire];
}

- (void)timerEvent:(id)sender {
    vvvv ++;
    NSLog(@"普通定时器运行中:%d",vvvv);
    
    if (vvvv%60 == 0) {
        [[NSUserDefaults standardUserDefaults] setObject:[NSString stringWithFormat:@"%d",vvvv] forKey:@"rk_keep_alive_time"];
    }
}

@end

</code></pre></div></div>

<h4 id="使用">使用</h4>

<p>1.在<code class="highlighter-rouge">AppDelegate.h</code>中声明一下结构体和属性</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>typedef NS_ENUM(NSInteger,YBAppLifeCycle) {
    APPLifeCycle_Default,           //默认
    APPLifeCycle_EnterForeground,   //进入前台
    APPLifeCycle_EnterBackground,   //进入后台
    APPLifeCycle_WillTerminate,     //杀进程
};
typedef void(^YBAppLifeCycleBlock) (YBAppLifeCycle lifeCycleType);

@interface AppDelegate : YBBaseAppDelegate

@property(nonatomic,copy)YBAppLifeCycleBlock lifeCycleEvent;
</code></pre></div></div>
<p>2.在<code class="highlighter-rouge">launchOptions</code>中设置监听</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    //生命周期监听
    [[RKKeepAlive sharedKeepInstance] startAppLifeCycleMonitor];
</code></pre></div></div>
<p>3.在以下几个系统方法中设置回调</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#pragma mark - 杀进程
- (void)applicationWillTerminate:(UIApplication *)application{
    if (self.lifeCycleEvent) {
        self.lifeCycleEvent(APPLifeCycle_WillTerminate);
    }
}
#pragma mark - App进入后台
- (void)applicationDidEnterBackground:(UIApplication *)application {
    
    if (self.lifeCycleEvent) {
        self.lifeCycleEvent(APPLifeCycle_EnterBackground);
    }
}
#pragma mark - App将要从后台返回
- (void)applicationWillEnterForeground:(UIApplication *)application {
    
    if (self.lifeCycleEvent) {
        self.lifeCycleEvent(APPLifeCycle_EnterForeground);
    }
    
}
</code></pre></div></div>

<h4 id="运行结果">运行结果</h4>
<div style="background-color:rgba(0,0,0,0.8); width: 100%;height: 420px;border-radius: 5px;color: #fff;padding-top: 10px;">
     <div style="float:left;border:solid 1px 000;width: 45%;padding-left: 5%"><img src="/img/20200722/1.jpg" width="200" height="260" /></div>
     <div style="float:left; border:solid 1px 000;width: 45%;padding-left: 5%"><img src="/img/20200722/2.jpg" width="200" height="260" /></div>
</div>
<div style="float:none;clear:both;width: 100%;height: 50px"> </div>
<!-- http://www.cocoachina.com/articles/896173   -->
<!-- https://juejin.im/post/5cf7eb0351882576710e5c15#heading-14 -->

<h4 id="总结">总结</h4>

<blockquote>
  <p>测试方式:播放后台音乐<br />
测试时间: 7-22  21:00开始   7-23 9:20结束<br />
测试时间[s]:iPhone6s【44160s】、iPhone6【43260s】【都是一分钟写一次记录】<br />
型号:iPhone6s【13.5.1】、iPhone6【12.4.7】<br />
电池峰值:iPhone6s【76%】、iPhone6【100%-换过电池】<br />
电量:iPhone6s【100%消耗到52%-消耗48%】、iPhone6【80%消耗到25%-消耗55%】</p>
</blockquote>

<blockquote>
  <p>测试方式:杀掉所有应用进程<br />
测试时间:7-23 18:00  7-24 8.20<br />
型号:iPhone6s【13.5.1】、iPhone6【12.4.7】<br />
电池峰值:iPhone6s【76%】、iPhone6【100%-换过电池】<br />
电量:iPhone6s【100%消耗到56%-消耗44%】(不可思议电池有问题？)、iPhone6【100%-消耗0】</p>
</blockquote>

<ul>
  <li>参考学习网址：</li>
  <li><code class="highlighter-rouge">App</code>接入<code class="highlighter-rouge">iOS 11</code>的<code class="highlighter-rouge">Files App</code>:<a href="https://www.jianshu.com/p/61b4e26ab413">https://www.jianshu.com/p/61b4e26ab413</a></li>
  <li><code class="highlighter-rouge">iOS</code>后台挂起的一些坑:<a href="https://www.cnblogs.com/saytome/p/7080056.html">https://www.cnblogs.com/saytome/p/7080056.html</a></li>
  <li><code class="highlighter-rouge">iOS</code>如何实时查看<code class="highlighter-rouge">App</code>运行日志:<a href="http://www.cocoachina.com/articles/19933">http://www.cocoachina.com/articles/19933</a></li>
  <li><code class="highlighter-rouge">iOS</code>版微信推送即时消息是如何实现的:<a href="https://www.zhihu.com/question/20654687">https://www.zhihu.com/question/20654687</a></li>
  <li><code class="highlighter-rouge">iPhone</code>在一个小时内,接受推送的次数有限制吗:<a href="https://community.jiguang.cn/t/iphone/2511">https://community.jiguang.cn/t/iphone/2511</a></li>
  <li>为什么<code class="highlighter-rouge">iOS</code>的微信没有常驻后台,也能收到新消息通知:<a href="https://mlog.club/article/45386">https://mlog.club/article/45386</a></li>
  <li><code class="highlighter-rouge">iOS</code>后台运行的相关方案总结:<a href="https://ctinusdev.github.io/2016/05/10/BackgroundTask/">https://ctinusdev.github.io/2016/05/10/BackgroundTask/</a></li>
  <li><code class="highlighter-rouge">iOS</code>之原生地图的使用详解:https://blog.csdn.net/u011146511/article/details/51245469</li>
  <li><code class="highlighter-rouge">iOS</code>项目技术还债之路《一》后台下载趟坑:https://juejin.im/post/5cf7eb0351882576710e5c15</li>
</ul>

:ET