I"s<h4 id="方法一">方法一</h4>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NSURL *videoURl = [NSURL URLWithString:_playUrl];
AVAsset *asset = [AVAsset assetWithURL:videoURl];
[asset loadValuesAsynchronouslyForKeys:@[@"tracks"] completionHandler:^{
    dispatch_async(dispatch_get_main_queue(), ^{
        if (asset.playable) {
            NSArray *array = asset.tracks;
            CGSize videoSize = CGSizeZero;
            for (AVAssetTrack *track in array) {
                if ([track.mediaType isEqualToString:AVMediaTypeVideo]) {
                    videoSize = track.naturalSize;
                }
            }
            NSLog(@"width-----------------------&gt;%f",videoSize.width);
            NSLog(@"height-----------------------&gt;%f",videoSize.height);
            if(videoSize.width&gt;videoSize.height){
                playerModel.playerLayer.videoGravity = AVLayerVideoGravityResizeAspect;
            }else{
                playerModel.playerLayer.videoGravity = AVLayerVideoGravityResizeAspectFill;
            }
        }
    });
}];
</code></pre></div></div>
<h4 id="方法二">方法二</h4>
<pre><code class="language-`">NSMutableString *imageURL = [NSMutableString stringWithFormat:@"%@",_img];
CGImageSourceRef source = CGImageSourceCreateWithURL((CFURLRef)[NSURL URLWithString:imageURL], NULL);
NSDictionary* imageHeader = (__bridge NSDictionary*) CGImageSourceCopyPropertiesAtIndex(source, 0, NULL);

_h = [NSString stringWithFormat:@"%@",[imageHeader objectForKey:@"PixelHeight"]];
_w = [NSString stringWithFormat:@"%@",[imageHeader objectForKey:@"PixelWidth"]];
</code></pre>

:ET