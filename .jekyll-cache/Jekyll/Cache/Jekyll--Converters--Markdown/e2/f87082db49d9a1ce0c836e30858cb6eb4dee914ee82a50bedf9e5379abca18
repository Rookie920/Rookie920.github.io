I"u$<h4 id="开篇">开篇</h4>

<p>相信不少初学手机联网开发的朋友都想知道<code class="highlighter-rouge">Http</code>与<code class="highlighter-rouge">Socket</code>连接究竟有什么区别，希望通过自己的浅显理解能对初学者有所帮助。</p>

<h5 id="tcp连接"><code class="highlighter-rouge">TCP</code>连接</h5>

<p>手机能够使用联网功能是因为手机底层实现了<code class="highlighter-rouge">TCP/IP</code>协议，可以使手机终端通过无线网络建立<code class="highlighter-rouge">TCP</code>连接。<code class="highlighter-rouge">TCP</code>协议可以对上层网络提供接口，使上层网络数据的传输建立在“无差别”的网络之上。</p>

<p>建立起一个<code class="highlighter-rouge">TCP</code>连接需要经过“三次握手”：</p>

<blockquote>
  <p>第一次握手：客户端发送<code class="highlighter-rouge">syn</code>包(<code class="highlighter-rouge">syn=j</code>)到服务器，并进入<code class="highlighter-rouge">SYN_SEND</code>状态，等待服务器确认；<br />
第二次握手：服务器收到<code class="highlighter-rouge">syn</code>包，必须确认客户的<code class="highlighter-rouge">SYN</code>（<code class="highlighter-rouge">ack=j+1</code>），同时自己也发送一个<code class="highlighter-rouge">SYN</code>包（<code class="highlighter-rouge">syn=k</code>），即<code class="highlighter-rouge">SYN+ACK</code>包，此时服务器进入<code class="highlighter-rouge">SYN_RECV</code>状态；<br />
第三次握手：客户端收到服务器的<code class="highlighter-rouge">SYN＋ACK</code>包，向服务器发送确认包<code class="highlighter-rouge">ACK</code>(<code class="highlighter-rouge">ack=k+1</code>)，此包发送完毕，客户端和服务器进入<code class="highlighter-rouge">ESTABLISHED</code>状态，完成三次握手。</p>
</blockquote>

<p>握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，<code class="highlighter-rouge">TCP</code>连接一旦建立，在通信双方中的任何一方主动关闭连接之前，<code class="highlighter-rouge">TCP</code> 连接都将被一直保持下去。断开连接时服务器和客户端均可以主动发起断开<code class="highlighter-rouge">TCP</code>连接的请求，断开过程需要经过“四次握手”（过程就不细写了，就是服务器和客户端交互，最终确定断开）</p>

<h5 id="http连接"><code class="highlighter-rouge">HTTP</code>连接</h5>

<p><code class="highlighter-rouge">HTTP</code>协议即超文本传送协议(<code class="highlighter-rouge">Hypertext Transfer Protocol</code>)，是<code class="highlighter-rouge">Web</code>联网的基础，也是手机联网常用的协议之一，HTTP协议是建立在<code class="highlighter-rouge">TCP</code>协议之上的一种应用。</p>

<p><code class="highlighter-rouge">HTTP</code>连接最显著的特点是客户端发送的每次请求都需要服务器回送响应，在请求结束后，会主动释放连接。从建立连接到关闭连接的过程称为“一次连接”。</p>

<ul>
  <li>在<code class="highlighter-rouge">HTTP 1.0</code>中，客户端的每次请求都要求建立一次单独的连接，在处理完本次请求后，就自动释放连接。</li>
  <li>在<code class="highlighter-rouge">HTTP 1.1</code>中则可以在一次连接中处理多个请求，并且多个请求可以重叠进行，不需要等待一个请求结束后再发送下一个请求。</li>
</ul>

<p>由于<code class="highlighter-rouge">HTTP</code>在每次请求结束后都会主动释放连接，因此<code class="highlighter-rouge">HTTP</code>连接是一种“短连接”，要保持客户端程序的在线状态，需要不断地向服务器发起连接请求。通常的做法是即时不需要获得任何数据，客户端也保持每隔一段固定的时间向服务器发送一次“保持连接”的请求，服务器在收到该请求后对客户端进行回复，表明知道客户端“在线”。若服务器长时间无法收到客户端的请求，则认为客户端“下线”，若客户端长时间无法收到服务器的回复，则认为网络已经断开。</p>

<h5 id="socket原理"><code class="highlighter-rouge">SOCKET</code>原理</h5>

<p>1.套接字（<code class="highlighter-rouge">socket</code>）概念</p>

<blockquote>
  <p>套接字（<code class="highlighter-rouge">socket</code>）是通信的基石，是支持<code class="highlighter-rouge">TCP/IP</code>协议的网络通信的基本操作单元。它是网络通信过程中端点的抽象表示，包含进行网络通信必须的五种信息：连接使用的协议，本地主机的IP地址，本地进程的协议端口，远地主机的IP地址，远地进程的协议端口。</p>
</blockquote>

<p>应用层通过传输层进行数据通信时，<code class="highlighter-rouge">TCP</code>会遇到同时为多个应用程序进程提供并发服务的问题。多个<code class="highlighter-rouge">TCP</code>连接或多个应用程序进程可能需要通过同一个 <code class="highlighter-rouge">TCP</code>协议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与<code class="highlighter-rouge">TCP／IP</code>协议交互提供了套接字(<code class="highlighter-rouge">Socket</code>)接口。应用层可以和传输层通过<code class="highlighter-rouge">Socket</code>接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务。</p>

<p>2.建立<code class="highlighter-rouge">socket</code>连接</p>

<p>建立<code class="highlighter-rouge">Socket</code>连接至少需要一对套接字，其中一个运行于客户端，称为<code class="highlighter-rouge">ClientSocket</code> ，另一个运行于服务器端，称为<code class="highlighter-rouge">ServerSocket</code> 。</p>

<p>套接字之间的连接过程分为三个步骤：服务器监听，客户端请求，连接确认。</p>

<blockquote>
  <p>服务器监听：服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求。<br />
客户端请求：指客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。<br />
连接确认：当服务器端套接字监听到或者说接收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，双方就正式建立连接。而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。</p>
</blockquote>

<h5 id="socket连接与tcp连接"><code class="highlighter-rouge">SOCKET</code>连接与<code class="highlighter-rouge">TCP</code>连接</h5>

<p>创建<code class="highlighter-rouge">Socket</code>连接时，可以指定使用的传输层协议，<code class="highlighter-rouge">Socket</code>可以支持不同的传输层协议（<code class="highlighter-rouge">TCP</code>或<code class="highlighter-rouge">UDP</code>），当使用<code class="highlighter-rouge">TCP</code>协议进行连接时，该<code class="highlighter-rouge">Socket</code>连接就是一个<code class="highlighter-rouge">TCP</code>连接。</p>

<h5 id="socket连接与http连接"><code class="highlighter-rouge">Socket</code>连接与<code class="highlighter-rouge">HTTP</code>连接</h5>

<p>由于通常情况下<code class="highlighter-rouge">Socket</code>连接就是<code class="highlighter-rouge">TCP</code>连接，因此<code class="highlighter-rouge">Socket</code>连接一旦建立，通信双方即可开始相互发送数据内容，直到双方连接断开。但在实际网络应用中，客户端到服务器之间的通信往往需要穿越多个中间节点，例如路由器、网关、防火墙等，大部分防火墙默认会关闭长时间处于非活跃状态的连接而导致 <code class="highlighter-rouge">Socket</code> 连接断连，因此需要通过轮询告诉网络，该连接处于活跃状态。</p>

<p>而<code class="highlighter-rouge">HTTP</code>连接使用的是“请求—响应”的方式，不仅在请求时需要先建立连接，而且需要客户端向服务器发出请求后，服务器端才能回复数据。</p>

<p>很多情况下，需要服务器端主动向客户端推送数据，保持客户端与服务器数据的实时与同步。此时若双方建立的是<code class="highlighter-rouge">Socket</code>连接，服务器就可以直接将数据传送给客户端；若双方建立的是<code class="highlighter-rouge">HTTP</code>连接，则服务器需要等到客户端发送一次请求后才能将数据传回给客户端，因此，客户端定时向服务器端发送连接请求，不仅可以保持在线，同时也是在“询问”服务器是否有新的数据，如果有就将数据传给客户端。</p>

:ET