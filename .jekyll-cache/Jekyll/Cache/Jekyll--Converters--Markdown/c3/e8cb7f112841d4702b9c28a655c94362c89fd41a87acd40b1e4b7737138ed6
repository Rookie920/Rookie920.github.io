I"<h4 id="网络监测">网络监测</h4>

<h5 id="rknetmonitorh"><code class="highlighter-rouge">RKNetMonitor.h</code></h5>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#import &lt;Foundation/Foundation.h&gt;

@interface RKNetConnect: NSObject

@property(nonatomic,strong)NSString *oBytes;            //上行流量
@property(nonatomic,strong)NSString *oBytesOfRate;
@property(nonatomic,strong)NSString *iBytes;            //下行流量
@property(nonatomic,strong)NSString *iBytesOfRate;

+(instancetype)shareInstance;

@end


@interface RKNetMonitor : NSObject

@property(nonatomic,strong)RKNetConnect *connectObj;

+(instancetype)shareInstance;
- (RKNetConnect *)getInterfaceBytes:(int)interval;

@end
</code></pre></div></div>

<h5 id="rknetmonitorm"><code class="highlighter-rouge">RKNetMonitor.m</code></h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#import "RKNetMonitor.h"

#include &lt;ifaddrs.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;net/if.h&gt;

#import "AppDelegate.h"


@implementation RKNetConnect

static RKNetConnect *_connect = nil;

+(instancetype)shareInstance {
    static dispatch_once_t onceToken;
    dispatch_once(&amp;onceToken, ^{
        _connect = [[super allocWithZone:NULL]init];
    });
    return _connect;
}
+ (instancetype)allocWithZone:(struct _NSZone *)zone {
    return [self shareInstance];;
}

@end

@interface RKNetMonitor()

@property (nonatomic, assign)long long int lastoBytes;  //上一次上行
@property (nonatomic, assign)long long int lastiBytes;  //上一次下行

@end

@implementation RKNetMonitor

static RKNetMonitor *_monitor = nil;

+(instancetype)shareInstance {
    static dispatch_once_t onceToken;
    dispatch_once(&amp;onceToken, ^{
        _monitor = [[super allocWithZone:NULL]init];
    });
    return _monitor;
}
+ (instancetype)allocWithZone:(struct _NSZone *)zone{
    return [self shareInstance];;
}


- (RKNetConnect *)getInterfaceBytes:(int)interval {
    if (!interval) {
        interval = 1;
    }
    _connectObj = [RKNetConnect shareInstance];
    
    struct ifaddrs *ifa_list = 0, *ifa;
    if (getifaddrs(&amp;ifa_list) == -1) {
        _connect.oBytes = 0;
        _connect.iBytes = 0;
        return 0;
    }
    
    uint32_t iBytes = 0;//下行
    uint32_t oBytes = 0;//上行
    
    for (ifa = ifa_list; ifa; ifa = ifa-&gt;ifa_next){
        
        if (AF_LINK != ifa-&gt;ifa_addr-&gt;sa_family)
            continue;
        if (!(ifa-&gt;ifa_flags &amp; IFF_UP) &amp;&amp; !(ifa-&gt;ifa_flags &amp; IFF_RUNNING))
            continue;
        if (ifa-&gt;ifa_data == 0)
            continue;
        /* Not a loopback device. */
        if (strncmp(ifa-&gt;ifa_name, "lo", 2)){
            struct if_data *if_data = (struct if_data *)ifa-&gt;ifa_data;
            iBytes += if_data-&gt;ifi_ibytes;
            oBytes += if_data-&gt;ifi_obytes;
        }
    }
    
    //计算
    long long int rateOfoBytes = 0;     //上行速率
    long long int rateOfiBytes = 0;     //下行速率
   
    if (self.lastoBytes) {
        //用当前的上行总流量 减去 上次的上行流量 达到上行速录
        rateOfoBytes = oBytes - self.lastoBytes;
    }
    if(self.lastiBytes) {
        rateOfiBytes = iBytes - self.lastiBytes;
    }
    
    //保存上一秒的
    self.lastoBytes = oBytes;
    self.lastiBytes = iBytes;
    
    NSLog(@"\n[getInterfaceBytes-Total]%d,%d",iBytes,oBytes);
    _connectObj.oBytes = [self formatNetWork:oBytes];
    _connectObj.iBytes = [self formatNetWork:iBytes];
    _connectObj.oBytesOfRate = [self formatNetWork:(rateOfoBytes/interval)];
    _connectObj.iBytesOfRate = [self formatNetWork:(rateOfiBytes/interval)];
    
    freeifaddrs(ifa_list);
    
    return _connectObj;
}
- (NSString*)formatNetWork:(long long int)rate {
    if(rate &lt;1024) {
        return[NSString stringWithFormat:@"%lldB", rate];
    }else if(rate &gt;=1024&amp;&amp; rate &lt;1024*1024) {
        return[NSString stringWithFormat:@"%.1fKB", (double)rate /1024];
    }else if(rate &gt;=1024*1024 &amp;&amp; rate &lt;1024*1024*1024){
        return[NSString stringWithFormat:@"%.2fMB", (double)rate / (1024*1024)];
    }else{
        return@"10Kb";
    };
}
@end
</code></pre></div></div>

<h5 id="外部调用">外部调用</h5>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    [[RKNetMonitor shareInstance] getInterfaceBytes:5];
    NSString *rateShowStr = [NSString stringWithFormat:@"上:%@ R:%@/S\n下:%@ R:%@/S",[RKNetMonitor shareInstance].connectObj.oBytes,[RKNetMonitor shareInstance].connectObj.oBytesOfRate,[RKNetMonitor shareInstance].connectObj.iBytes,[RKNetMonitor shareInstance].connectObj.iBytesOfRate];
    //_rateBtn显示网速的 按钮
    [_rateBtn setTitle:rateShowStr forState:0];
</code></pre></div></div>

:ET