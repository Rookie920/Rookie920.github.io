I"<p>1.在<code class="highlighter-rouge">AppDelegate.h</code>文件中添加</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/***  是否允许横屏的标记 */
@property (nonatomic,assign)BOOL allowRotation;

</code></pre></div></div>

<p>2.在<code class="highlighter-rouge">AppDelegate.m</code>中添加</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-(UIInterfaceOrientationMask)application:(UIApplication *)application supportedInterfaceOrientationsForWindow:(UIWindow *)window {
    if (self.allowRotation) {//如果设置了allowRotation属性，支持全屏
       return UIInterfaceOrientationMaskAll;
}
    return UIInterfaceOrientationMaskPortrait;//默认全局不支持横屏
}
</code></pre></div></div>

<p>3.接着在置顶横竖屏UI界面设置</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//进入全屏
-(void)begainFullScreen{
  AppDelegate *appDelegate = (AppDelegate *)[[UIApplication sharedApplication] delegate];
  appDelegate.allowRotation = YES;
}
// 退出全屏
-(void)endFullScreen{
  AppDelegate *appDelegate = (AppDelegate *)[[UIApplication sharedApplication] delegate];
  appDelegate.allowRotation = NO;
  //强制归正：
  if ([[UIDevice currentDevice] respondsToSelector:@selector(setOrientation:)]) {
    SEL selector = NSSelectorFromString(@"setOrientation:");
    NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:[UIDevice instanceMethodSignatureForSelector:selector]];
    [invocation setSelector:selector];
    [invocation setTarget:[UIDevice currentDevice]];
    int val =UIInterfaceOrientationPortrait;
    [invocation setArgument:&amp;val atIndex:2];
    [invocation invoke];
  }
}
</code></pre></div></div>
:ET